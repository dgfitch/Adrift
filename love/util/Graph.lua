love.filesystem.require("util/geom.lua")

Graph = {

  create = function(self, numNodes)
    local result = {nodes = {}, arcs = {}}
    
    -- this probably underestimates the number of seeds, because
    -- it's based on a "best case" number of intersection nodes
    -- being generated by the arcs between the seed nodes
    local numSeeds = 3--math.ceil((numNodes/35)^(4/25))
    
    for seedIndex = 1,numSeeds do
      table.insert(result.nodes,GraphNode:create())
    end
    
    -- generate a complete graph from the seed nodes
    local seedNodes = result.nodes
    for arcIndex1 = 1,numSeeds do
      for arcIndex2 = arcIndex1+1,numSeeds do
        table.insert(result.arcs,GraphArc:create(seedNodes[arcIndex1],seedNodes[arcIndex2]))
      end
    end
    
    -- generate nodes at the points of intersection
    local arcIndex1 = 1
    while result.arcs[arcIndex1]~=nil do
      
      local arc1 = result.arcs[arcIndex1]
      local arc1head, arc1tail = arc1.head, arc1.tail
      
      local arcIndex2 = arcIndex1
      while result.arcs[arcIndex2]~=nil do
        local arc2 = result.arcs[arcIndex2]
        local arc2head, arc2tail = arc2.head, arc2.tail
        
        local ip = geom.intersection_point_t(arc1head, arc1tail, arc2head, arc2tail, false)
        if ip ~= nil then
          local newNode = GraphNode:create(); newNode.x, newNode.y = ip.x, ip.y
          table.insert(result.nodes,newNode)
          
          -- reuse old arcs
          arc1.tail = newNode
          arc2.tail = newNode
          
          local newArc1 = GraphArc:create(newNode,arc1tail); table.insert(result.arcs, newArc1)
          local newArc2 = GraphArc:create(newNode,arc2tail); table.insert(result.arcs, newArc2)
        end
        
        arcIndex2 = arcIndex2 + 1
      end
      arcIndex1 = arcIndex1 + 1
    end
    return result
  end
}

GraphNode = {
  create = function(self)
    return {x = math.random(), y = math.random()}
  end
}

GraphArc = {
  create = function(self, headNode, tailNode)
    return {head = headNode, tail = tailNode}
  end
}